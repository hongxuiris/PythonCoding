
## Recursion: the process of defining a problem in terms of itself. Here recursion is a process in whcih a function calls itself as a subroutine.
## n! = 1*2*3* ... * n

## iterative factorial 

def factorial_loop(n):
    result = 1
    for number in range(1, n+1):
        result = result * number
     
     return result
     
 ## recursion: n! = n*(n-1)!
 def factorial_recursion(n): 
     # base case, to prevent infinite calling
     if n == 1:       
         return 1
     # a recursive call to a smaller problem of itself
     return n*factorial_recursion(n-1)
      
 ## application of recursion example: decision trees (a model that is used to predict different outcomes depending on its logical structure)
 ## for a classification tree, giveen a new sample x(x1, x2), we can traverse the tree to find out its category.
catregory = pred(node, x):
    # check if there is a split
    if node.hasSplitting:
        # check which child node to take
        if node.goToLeftChild(x):
            return pred(node.leftChild, x)
        if node.goToRightChild(x):
            return pred(node.rightChild, x)
    # returning the category
    return node.categoty
    
## Fibonacci sequence: non-negative integers from 0 with each element 
