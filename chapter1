
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
####################### Chapter 1 : Data Structure and String Manipulation

## chapter 1.1 Main data structure
# Data structure: a specialized format to organize and store data.
# main data structures in Python : list, tuple, set, dictionary

# list: an ordered mutable sequence of items (e.g. numbers, strings and other objects)
my_list = [1,2,3,4,5]
print(my_list)
print(my_list[2]) # 3 (indexing from 0)
print(my_list[-1]) # negative index, counting workd backwards in the list
print(my_list[1:4])  # access sub-list via slicing
print(my_list[2:]) # not specify left/right side index results in the whole range into account

# modify list
my_list[2] = 30
my_list[:2] = [10, 20]

# methods
my_list = [10, 20, 30, 40, 50]
my_list_append(60) 
print(my_list) # [10, 20, 30, 40, 50, 60]
my_list.remove(60)
print(my_list) # [10, 20, 30, 40, 50]

# pop removes the last item from a list and returns its value
my_list.pop() # 50 
print(my_list) # [10, 20, 30, 40]
#count() counts the number of a certain item in a list
my_list.count(40)  #1


# tuple: an ordered immutable sequence of items (numbers, strings, etc.)
# immutable means we can't modify it
# create tuple by using ()
my_tuple = (1, 'apple','2', 'banana')
# create tuple by writting comma-seperated values
my_tuple = 1, 'apple','2', 'banana'
# modifying items in a tuple is not possible !!! will get TypeError


# set: an unordered collection with no duplicate items 
# unordered means there is no indexing for the constituent items
my_set = set([1,2,3,4,5])
my_set = set([1,1,1,2,3,4,5,5,5])
print(my_set) # {1,2,3,4,5}

# insert a new item to a set
my_set1 = set([1,2,3,4,5])
my_set2 = set([3,4,5,6,7])
my_set1.add(6)
print(my_set1) # {1,2,3,4,5,6}
my_set1.remove(6)
print(my_set1) # {1,2,3,4,5}

my_set1.union(my_set2) # {1,2,3,4,5,6,7}
my_set1.intersection(my_set2) # {3,4,5}
my_set1.difference(my_set2) # {1,2} items in set1 but not in set2


# dictionary: a collection of key value pairs where keys are unique and immutalbe 
# dictionary is unordered
# create dictionary with curly bracckets
fruits = {'apple':10, 'orange':6, 'banana': 9}

# dict() constructor with a list of tuples
fruits = dict([('apple', 1), ('orange',6), ('banana',9)])

# access by specifying the key
fruits['apple']

# raise KeyError is the key does not exist
fruits['grape'] # KeyError

# modifying values
fruits['apple'] = 20
# if key does not exist, the opporation creates a key-value pair
fruits['grape'] = 11

# methods
# items() # return key-value pairs
list(fruits.items()) # [('apple', 10), ('orange',6), ('banana',9)]
list(fruits.keys()) # ['apple', 'orange', 'banana']
list(fruits.values()) #[10,6,9]

# remove the last inserted key-value pair with the popitem() method
fruits.popitem('banana') # 9 returns the associated value

# operations on list, tuple, set and dictionary
len()
# in
2 in my_list/my_tuple/my_set/my_dict

############# ********************** exercise ***************************** #######################

#Let's imagine a situation: you went to the market and filled your baskets (basket1 and basket2) with fruits. You wanted to have one 
# of each kind but realized that some fruits were put in both baskets.
# Task 1. Your first task is to remove everything from basket2 that is already present in basket1.
# Task 2. After the removal it is reasonable to anticipate that one of the baskets might weigh more compared to the another (all 
# fruit kinds weight the same). Therefore, the second task is to transfer some fruits from a heavier basket to the lighter one to 
# get approximately the same weight/amount of fruits.

for fruit in basket2:
    if fruit in basket1:
        basket2.remove(fruit)
print('Basket 1: ' + str(basket1))
print('Basket 2: ' + str(basket2))

# Transfer fruits from basket1 to basket2
while len(basket1) > len(basket2):
    item_to_move = basket1.pop()
    basket2.append(item_to_move)

# (A∪(B∩C))−(D∩E)
# A.union(B.intersection(C)).difference(D.intersection(E))

# Is it possible to use a list instead of a tuple for a key in the circ_parab dictionary?
# No, because a list is mutable and the operation will result in TypeError.
circ_parab = dict()

for x in range_x:
    for y in range_y:        
        # Calculate the value for z
        z = x**2 + y**2
        # Create a new key for the dictionary
        key = (x,y)
        # Create a new key-value pair      
        circ_parab[key] = z


## chapter 1.2 common ways to manipulate strings
# string
s= 'hello'
s= "hello"
s = str("hello")
str(11.5)    # '11.5'
str([1,2,3]) # '[1,2,3]'

class NewClass:
    def __init__(self, num):
        self.num = num
    def __str__(self):
        return str(self.num)
        
nc = NewClass(2)
print(nc.num) #2
str(nc) # '2'

# accessing characters in a string
s = 'interview'
s[1] # 'n'
s[-2] # 'e'
s[1:4] # 'nte'
s[2:] #'terview'
s[:3] #'int'

# to retrieve an index of a specific character in a string: .index() method
s = 'interview'
s.index('n') # 1
s.index('i') # 0 if the character present more than once, only the lowest index is returned

# strings are immutable, you can't modify an existing string
s[0] = 'a'  # TypeError

# string methods
# string concatenation
s1='worm'
s2 = s1+'hole'
print(s2) # wormhole

# .replace(): it substitutes all the occurances of a specific character sequence in a string with another sequence
s1 = 'a dog ate my food'
s2 = s1.replace('dog', 'cat')
print(s2) # a cat ate my food

s3 = s2.upper() # A CAT ATE MY FOOD
s4 = s3.lower() # a cat ate my food

#.capitalize(): capitalize only the first letter in a string
s5 = s4.capitalize() # A cat ate my food

# relation to lists
# create a string from a list of strings
 l = ['I', 'like', 'to', 'study']
s = ' '.join(l)
print(s) # I like to study

# breaking string into a list of strings
l = s.split(' ')  # ['I', 'like', 'to', 'study']

# string methods with DataFrames
# create a DataFrame using a custom dictionary
import pandas as pd
d = {'name' : ['john', 'amanda', 'rick'], 'age': [35, 29, 19]}
D = pd.DataFrame(d)
print(D)

D['name'] = D['name'].str.capitalize()

###############  exercise   ##########
# String indexing and concatenation
# encryption techniques - Caesar cipher: It is based on a simple shift of each letter in a message by a certain number of positions 
# down the given alphabet. For example, given the English alphabet, a shift of 1 for 'xyz' would imply 'yza'

def encrypt(text, key):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    result = ''
    for c in text.lower():
        idx = (alphabet.index(c) + key) % len(alphabet)
        result = result + alphabet[idx]
    return result

# What would be the corresponding change in the decrypt() function?
#  It is enough to only subtract since Python allows negative indexing.
idx = alphabet.index(char) - key


### Operations on strings
text = 'StRing ObJeCts haVe mANy inTEResting pROPerTies'
# Your task is to modify this string in such a way that would result in 'string OBJECTS have MANY interesting PROPERTIES' 
# (every other word in text is uppercased and lowercased, otherwise).

word_list = text.split()

# Make every other word uppercased; otherwise - lowercased
for i in range(len(word_list)):
    if (i + 1) % 2 == 0:
        word_list[i] = word_list[i].upper()
    else:
        word_list[i] = word_list[i].lower()
        
# Join the words back and form a new string
new_text = ' '.join(word_list)
print(new_text)

#### Fixing string errors in a DataFrame
# the heroes dataset containing the information on different comic book heroes.

# Make all the values in the 'Hair color' column lowercased
heroes['Hair color'] = heroes['Hair color'].str.lower()  
# Check the values in the 'Hair color' column
print(heroes['Hair color'].value_counts())

# Substitute 'Fmale' with 'Female' in the 'Gender' column
#Note that Series and DataFrames have their own .replace() method that deals with any kind of objects in addition to strings.
heroes['Gender'] = heroes['Gender'].str.replace('Fmale', 'Female')
# Check if there is no occurences of 'Fmale'
print(heroes['Gender'].value_counts())

## chapter 1.3 Regular Expression
# Regular Expression: a sequence of special characters (metacharacters) defining a pattern to search in a text

# special characters
# simple characters and numbers are mapped onto themselves:
# . is mapped to any character. \. maps to dot character
# \w : any alphanumeric character or underscore
# \d : any digit
# \s : any whitespace character. ' ', '\t', ...
# square brackets: several metacharacters can be enclosed in square brackets, the mapping will result in strings that matches 
# either of the metacharacters
# [a-z] : any lowercase character
# [A-Z] : any uppercase character
# [0-9] : any digit

# repetitions
# * : no character or it repeats an undefined number of times
# + : the character is present at least once
# ? : the character exists or not
# {n, m} : the character is present from n to m times

# regular expression for an email
import re
pattern = re.compile(r'[\w\.]+@[a-z]+\.[a-z]+')
result = re.finditer(pattern, text) # result is callable iterater

for match in result:
    print(match.group())
    print(match.start())
    print(match.end())
    
# if only interested about the matching strings, use findall(), it returns a list of matching substrings
substrings = re.findall(pattern, text)

# re.split(): splits a given string by a matching pattern

#######  **************  exercise 
# Write a regular expression: 
# create a regular expression matching a valid temperature represented either in Celsius or Fahrenheit scale (e.g. '+23.5 C', '-4 F',
# '0.0 C') and to extract all the appearances from the given string text.

pattern = re.compile(r'[+-]?\d+\.?\d*\s[FC]')
print(re.findall(pattern, text))

# Create an object storing the matches using 'finditer()'
matches_storage = re.finditer(pattern, text)

# Loop over matches_storage and print out item properties
for match in matches_storage:
    print('matching sequence = ' + match.group())
    print('start index = ' + str(match.start()))
    print('end index = ' + str(match.end()))


# pattern that matches the long date format (for example, October 26, 1988 or Oct 26, 1988 with the first letter capitalized)?
# [A-Z][a-z]+\s[1-3]?\d,\s\d+

# Splitting by a pattern
# Split the text in such a way that the resulting list has only words or numbers with no blank spaces or punctuation.
pattern = re.compile(r'[\s,\.:;?!]+')
words = re.split(pattern, text)
print(words)

# # Define an easier way to extract words or numbers
alt_pattern = re.compile(r'[\da-zA-Z]+')
print(re.findall(alt_pattern, text))

# When given a task on regular expressions, there might be many ways to solve it. It is always better to think on the easiest one!


